{-# OPTIONS_GHC -Wno-orphans #-}

-- | Copyright : (c) Crown Copyright GCHQ
module Bootstrap.Data.Bootstrappable.BootstrapStateSpec (spec) where

import Bootstrap.Data.Bootstrappable (Bootstrappable (bootstrapContent))
import Bootstrap.Data.Bootstrappable.BootstrapState (BootstrapState, bootstrapStateCodec, bootstrapStateFor)
import Bootstrap.Data.ContinuousIntegration (ContinuousIntegrationConfig (ContinuousIntegrationConfig))
import Bootstrap.Data.DevContainer (DevContainerConfig (DevContainerConfig))
import Bootstrap.Data.PreCommitHook (PreCommitHooksConfig (PreCommitHooksConfig))
import Bootstrap.Data.ProjectName (mkProjectName)
import Bootstrap.Data.ProjectType (ProjectType (Node))
import Bootstrap.Data.ProjectTypeSpec ()
import Data.Version (showVersion)
import Paths_nix_bootstrap (version)
import qualified Relude.Unsafe as Unsafe
import Test.Hspec (Spec, describe, it)
import Test.Hspec.Expectations.Pretty (shouldBe)
import Test.Hspec.QuickCheck (prop)
import Test.QuickCheck
  ( Arbitrary (arbitrary),
    arbitraryBoundedEnum,
    generate,
  )
import Test.Util (tomlRoundtripTest)

instance Arbitrary BootstrapState where
  arbitrary = do
    let projectName = Unsafe.fromJust $ mkProjectName "test-project"
    projectType <- arbitrary
    preCommitHooksConfig <- PreCommitHooksConfig <$> arbitrary
    devContainerConfig <- DevContainerConfig <$> arbitrary
    ciConfig <- ContinuousIntegrationConfig <$> arbitrary
    bootstrapStateFor projectName projectType preCommitHooksConfig ciConfig devContainerConfig <$> arbitrary

spec :: Spec
spec = describe ".nix-bootstrap.toml rendering" do
  it "renders correctly" do
    let projectName = Unsafe.fromJust $ mkProjectName "test-project"
    nodePackageManager <- generate Test.QuickCheck.arbitraryBoundedEnum
    bootstrapContent
      ( bootstrapStateFor
          projectName
          (Node nodePackageManager)
          (PreCommitHooksConfig True)
          (ContinuousIntegrationConfig True)
          (DevContainerConfig True)
          False
      )
      >>= ( `shouldBe`
              Right
                ( unlines
                    [ "# This file was generated by nix-bootstrap.",
                      "# It should be checked into version control.",
                      "# It is used to aid migration between nix-bootstrap versions and preserve idempotence.",
                      "",
                      "projectName = \"test-project\"",
                      "setUpContinuousIntegration = true",
                      "setUpDevContainer = true",
                      "setUpPreCommitHooks = true",
                      "useFlakes = false",
                      "version = \"" <> toText (showVersion version) <> "\"",
                      "",
                      "[projectType]",
                      "  nodePackageManager = \"" <> show nodePackageManager <> "\"",
                      "  projectSuperType = \"PSTNode\""
                    ]
                )
          )
  prop "roundtrips" $ tomlRoundtripTest bootstrapStateCodec
